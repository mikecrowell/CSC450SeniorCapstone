#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1008
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PhysicianPortal2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="csc450mcrowell")]
	public partial class LinqToAllDataDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertINTERFACELOG(INTERFACELOG instance);
    partial void UpdateINTERFACELOG(INTERFACELOG instance);
    partial void DeleteINTERFACELOG(INTERFACELOG instance);
    partial void InsertUSER(USER instance);
    partial void UpdateUSER(USER instance);
    partial void DeleteUSER(USER instance);
    partial void InsertORDER(ORDER instance);
    partial void UpdateORDER(ORDER instance);
    partial void DeleteORDER(ORDER instance);
    partial void InsertPATIENT(PATIENT instance);
    partial void UpdatePATIENT(PATIENT instance);
    partial void DeletePATIENT(PATIENT instance);
    partial void InsertPHYSICIAN(PHYSICIAN instance);
    partial void UpdatePHYSICIAN(PHYSICIAN instance);
    partial void DeletePHYSICIAN(PHYSICIAN instance);
    partial void InsertRESULT(RESULT instance);
    partial void UpdateRESULT(RESULT instance);
    partial void DeleteRESULT(RESULT instance);
    partial void InsertSITE(SITE instance);
    partial void UpdateSITE(SITE instance);
    partial void DeleteSITE(SITE instance);
    partial void InsertSTAFF(STAFF instance);
    partial void UpdateSTAFF(STAFF instance);
    partial void DeleteSTAFF(STAFF instance);
    partial void InsertTEST(TEST instance);
    partial void UpdateTEST(TEST instance);
    partial void DeleteTEST(TEST instance);
    #endregion
		
		public LinqToAllDataDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["csc450mcrowellConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToAllDataDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToAllDataDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToAllDataDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LinqToAllDataDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<INTERFACELOG> INTERFACELOGs
		{
			get
			{
				return this.GetTable<INTERFACELOG>();
			}
		}
		
		public System.Data.Linq.Table<USER> USERs
		{
			get
			{
				return this.GetTable<USER>();
			}
		}
		
		public System.Data.Linq.Table<ORDER> ORDERs
		{
			get
			{
				return this.GetTable<ORDER>();
			}
		}
		
		public System.Data.Linq.Table<PATIENT> PATIENTs
		{
			get
			{
				return this.GetTable<PATIENT>();
			}
		}
		
		public System.Data.Linq.Table<PHYSICIAN> PHYSICIANs
		{
			get
			{
				return this.GetTable<PHYSICIAN>();
			}
		}
		
		public System.Data.Linq.Table<RESULT> RESULTs
		{
			get
			{
				return this.GetTable<RESULT>();
			}
		}
		
		public System.Data.Linq.Table<SITE> SITEs
		{
			get
			{
				return this.GetTable<SITE>();
			}
		}
		
		public System.Data.Linq.Table<STAFF> STAFFs
		{
			get
			{
				return this.GetTable<STAFF>();
			}
		}
		
		public System.Data.Linq.Table<TEST> TESTs
		{
			get
			{
				return this.GetTable<TEST>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.INTERFACELOG")]
	public partial class INTERFACELOG : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.DateTime _Date_Time;
		
		private string _Log_Entry;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDate_TimeChanging(System.DateTime value);
    partial void OnDate_TimeChanged();
    partial void OnLog_EntryChanging(string value);
    partial void OnLog_EntryChanged();
    #endregion
		
		public INTERFACELOG()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date_Time", DbType="DateTime NOT NULL", IsPrimaryKey=true)]
		public System.DateTime Date_Time
		{
			get
			{
				return this._Date_Time;
			}
			set
			{
				if ((this._Date_Time != value))
				{
					this.OnDate_TimeChanging(value);
					this.SendPropertyChanging();
					this._Date_Time = value;
					this.SendPropertyChanged("Date_Time");
					this.OnDate_TimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Log_Entry", DbType="VarChar(MAX)")]
		public string Log_Entry
		{
			get
			{
				return this._Log_Entry;
			}
			set
			{
				if ((this._Log_Entry != value))
				{
					this.OnLog_EntryChanging(value);
					this.SendPropertyChanging();
					this._Log_Entry = value;
					this.SendPropertyChanged("Log_Entry");
					this.OnLog_EntryChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[USER]")]
	public partial class USER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _User_Name;
		
		private string _Password;
		
		private bool _Is_Physician;
		
		private bool _Is_Active;
		
		private bool _Is_Admin;
		
		private EntitySet<PHYSICIAN> _PHYSICIANs;
		
		private EntitySet<STAFF> _STAFFs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnIs_PhysicianChanging(bool value);
    partial void OnIs_PhysicianChanged();
    partial void OnIs_ActiveChanging(bool value);
    partial void OnIs_ActiveChanged();
    partial void OnIs_AdminChanging(bool value);
    partial void OnIs_AdminChanged();
    #endregion
		
		public USER()
		{
			this._PHYSICIANs = new EntitySet<PHYSICIAN>(new Action<PHYSICIAN>(this.attach_PHYSICIANs), new Action<PHYSICIAN>(this.detach_PHYSICIANs));
			this._STAFFs = new EntitySet<STAFF>(new Action<STAFF>(this.attach_STAFFs), new Action<STAFF>(this.detach_STAFFs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Physician", DbType="Bit NOT NULL")]
		public bool Is_Physician
		{
			get
			{
				return this._Is_Physician;
			}
			set
			{
				if ((this._Is_Physician != value))
				{
					this.OnIs_PhysicianChanging(value);
					this.SendPropertyChanging();
					this._Is_Physician = value;
					this.SendPropertyChanged("Is_Physician");
					this.OnIs_PhysicianChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Active", DbType="Bit NOT NULL")]
		public bool Is_Active
		{
			get
			{
				return this._Is_Active;
			}
			set
			{
				if ((this._Is_Active != value))
				{
					this.OnIs_ActiveChanging(value);
					this.SendPropertyChanging();
					this._Is_Active = value;
					this.SendPropertyChanged("Is_Active");
					this.OnIs_ActiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Is_Admin", DbType="Bit NOT NULL")]
		public bool Is_Admin
		{
			get
			{
				return this._Is_Admin;
			}
			set
			{
				if ((this._Is_Admin != value))
				{
					this.OnIs_AdminChanging(value);
					this.SendPropertyChanging();
					this._Is_Admin = value;
					this.SendPropertyChanged("Is_Admin");
					this.OnIs_AdminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_PHYSICIAN", Storage="_PHYSICIANs", ThisKey="User_Name", OtherKey="User_Name")]
		public EntitySet<PHYSICIAN> PHYSICIANs
		{
			get
			{
				return this._PHYSICIANs;
			}
			set
			{
				this._PHYSICIANs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_STAFF", Storage="_STAFFs", ThisKey="User_Name", OtherKey="User_Name")]
		public EntitySet<STAFF> STAFFs
		{
			get
			{
				return this._STAFFs;
			}
			set
			{
				this._STAFFs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PHYSICIANs(PHYSICIAN entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_PHYSICIANs(PHYSICIAN entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
		
		private void attach_STAFFs(STAFF entity)
		{
			this.SendPropertyChanging();
			entity.USER = this;
		}
		
		private void detach_STAFFs(STAFF entity)
		{
			this.SendPropertyChanging();
			entity.USER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[ORDER]")]
	public partial class ORDER : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Order_ID;
		
		private string _Physician_ID;
		
		private string _Test_Code;
		
		private System.DateTime _Order_Date;
		
		private string _Order_Status;
		
		private string _Patient_ID;
		
		private string _Site_ID;
		
		private EntitySet<RESULT> _RESULTs;
		
		private EntityRef<PATIENT> _PATIENT;
		
		private EntityRef<PHYSICIAN> _PHYSICIAN;
		
		private EntityRef<SITE> _SITE;
		
		private EntityRef<TEST> _TEST;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrder_IDChanging(string value);
    partial void OnOrder_IDChanged();
    partial void OnPhysician_IDChanging(string value);
    partial void OnPhysician_IDChanged();
    partial void OnTest_CodeChanging(string value);
    partial void OnTest_CodeChanged();
    partial void OnOrder_DateChanging(System.DateTime value);
    partial void OnOrder_DateChanged();
    partial void OnOrder_StatusChanging(string value);
    partial void OnOrder_StatusChanged();
    partial void OnPatient_IDChanging(string value);
    partial void OnPatient_IDChanged();
    partial void OnSite_IDChanging(string value);
    partial void OnSite_IDChanged();
    #endregion
		
		public ORDER()
		{
			this._RESULTs = new EntitySet<RESULT>(new Action<RESULT>(this.attach_RESULTs), new Action<RESULT>(this.detach_RESULTs));
			this._PATIENT = default(EntityRef<PATIENT>);
			this._PHYSICIAN = default(EntityRef<PHYSICIAN>);
			this._SITE = default(EntityRef<SITE>);
			this._TEST = default(EntityRef<TEST>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Order_ID
		{
			get
			{
				return this._Order_ID;
			}
			set
			{
				if ((this._Order_ID != value))
				{
					this.OnOrder_IDChanging(value);
					this.SendPropertyChanging();
					this._Order_ID = value;
					this.SendPropertyChanged("Order_ID");
					this.OnOrder_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physician_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Physician_ID
		{
			get
			{
				return this._Physician_ID;
			}
			set
			{
				if ((this._Physician_ID != value))
				{
					if (this._PHYSICIAN.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPhysician_IDChanging(value);
					this.SendPropertyChanging();
					this._Physician_ID = value;
					this.SendPropertyChanged("Physician_ID");
					this.OnPhysician_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Test_Code
		{
			get
			{
				return this._Test_Code;
			}
			set
			{
				if ((this._Test_Code != value))
				{
					if (this._TEST.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTest_CodeChanging(value);
					this.SendPropertyChanging();
					this._Test_Code = value;
					this.SendPropertyChanged("Test_Code");
					this.OnTest_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Date", DbType="Date NOT NULL")]
		public System.DateTime Order_Date
		{
			get
			{
				return this._Order_Date;
			}
			set
			{
				if ((this._Order_Date != value))
				{
					this.OnOrder_DateChanging(value);
					this.SendPropertyChanging();
					this._Order_Date = value;
					this.SendPropertyChanged("Order_Date");
					this.OnOrder_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Order_Status
		{
			get
			{
				return this._Order_Status;
			}
			set
			{
				if ((this._Order_Status != value))
				{
					this.OnOrder_StatusChanging(value);
					this.SendPropertyChanging();
					this._Order_Status = value;
					this.SendPropertyChanged("Order_Status");
					this.OnOrder_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					if (this._PATIENT.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Site_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Site_ID
		{
			get
			{
				return this._Site_ID;
			}
			set
			{
				if ((this._Site_ID != value))
				{
					if (this._SITE.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSite_IDChanging(value);
					this.SendPropertyChanging();
					this._Site_ID = value;
					this.SendPropertyChanged("Site_ID");
					this.OnSite_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_RESULT", Storage="_RESULTs", ThisKey="Order_ID", OtherKey="Order_ID")]
		public EntitySet<RESULT> RESULTs
		{
			get
			{
				return this._RESULTs;
			}
			set
			{
				this._RESULTs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PATIENT_ORDER", Storage="_PATIENT", ThisKey="Patient_ID", OtherKey="Patient_ID", IsForeignKey=true)]
		public PATIENT PATIENT
		{
			get
			{
				return this._PATIENT.Entity;
			}
			set
			{
				PATIENT previousValue = this._PATIENT.Entity;
				if (((previousValue != value) 
							|| (this._PATIENT.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PATIENT.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._PATIENT.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._Patient_ID = value.Patient_ID;
					}
					else
					{
						this._Patient_ID = default(string);
					}
					this.SendPropertyChanged("PATIENT");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHYSICIAN_ORDER", Storage="_PHYSICIAN", ThisKey="Physician_ID", OtherKey="Physician_ID", IsForeignKey=true)]
		public PHYSICIAN PHYSICIAN
		{
			get
			{
				return this._PHYSICIAN.Entity;
			}
			set
			{
				PHYSICIAN previousValue = this._PHYSICIAN.Entity;
				if (((previousValue != value) 
							|| (this._PHYSICIAN.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PHYSICIAN.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._PHYSICIAN.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._Physician_ID = value.Physician_ID;
					}
					else
					{
						this._Physician_ID = default(string);
					}
					this.SendPropertyChanged("PHYSICIAN");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SITE_ORDER", Storage="_SITE", ThisKey="Site_ID", OtherKey="Site_ID", IsForeignKey=true)]
		public SITE SITE
		{
			get
			{
				return this._SITE.Entity;
			}
			set
			{
				SITE previousValue = this._SITE.Entity;
				if (((previousValue != value) 
							|| (this._SITE.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SITE.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._SITE.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._Site_ID = value.Site_ID;
					}
					else
					{
						this._Site_ID = default(string);
					}
					this.SendPropertyChanged("SITE");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEST_ORDER", Storage="_TEST", ThisKey="Test_Code", OtherKey="Test_Code", IsForeignKey=true)]
		public TEST TEST
		{
			get
			{
				return this._TEST.Entity;
			}
			set
			{
				TEST previousValue = this._TEST.Entity;
				if (((previousValue != value) 
							|| (this._TEST.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TEST.Entity = null;
						previousValue.ORDERs.Remove(this);
					}
					this._TEST.Entity = value;
					if ((value != null))
					{
						value.ORDERs.Add(this);
						this._Test_Code = value.Test_Code;
					}
					else
					{
						this._Test_Code = default(string);
					}
					this.SendPropertyChanged("TEST");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RESULTs(RESULT entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = this;
		}
		
		private void detach_RESULTs(RESULT entity)
		{
			this.SendPropertyChanging();
			entity.ORDER = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PATIENT")]
	public partial class PATIENT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Patient_ID;
		
		private string _Last_Name;
		
		private string _First_Name;
		
		private System.Nullable<System.DateTime> _DOB;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private string _Gender;
		
		private EntitySet<ORDER> _ORDERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPatient_IDChanging(string value);
    partial void OnPatient_IDChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnDOBChanging(System.Nullable<System.DateTime> value);
    partial void OnDOBChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    #endregion
		
		public PATIENT()
		{
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Patient_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Patient_ID
		{
			get
			{
				return this._Patient_ID;
			}
			set
			{
				if ((this._Patient_ID != value))
				{
					this.OnPatient_IDChanging(value);
					this.SendPropertyChanging();
					this._Patient_ID = value;
					this.SendPropertyChanged("Patient_ID");
					this.OnPatient_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DOB", DbType="Date")]
		public System.Nullable<System.DateTime> DOB
		{
			get
			{
				return this._DOB;
			}
			set
			{
				if ((this._DOB != value))
				{
					this.OnDOBChanging(value);
					this.SendPropertyChanging();
					this._DOB = value;
					this.SendPropertyChanged("DOB");
					this.OnDOBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(50)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="VarChar(50)")]
		public string Gender
		{
			get
			{
				return this._Gender;
			}
			set
			{
				if ((this._Gender != value))
				{
					this.OnGenderChanging(value);
					this.SendPropertyChanging();
					this._Gender = value;
					this.SendPropertyChanged("Gender");
					this.OnGenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PATIENT_ORDER", Storage="_ORDERs", ThisKey="Patient_ID", OtherKey="Patient_ID")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.PATIENT = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.PATIENT = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PHYSICIAN")]
	public partial class PHYSICIAN : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Physician_ID;
		
		private string _Last_Name;
		
		private string _First_Name;
		
		private string _UPIN;
		
		private string _Specialty;
		
		private string _User_Name;
		
		private EntitySet<ORDER> _ORDERs;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPhysician_IDChanging(string value);
    partial void OnPhysician_IDChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnUPINChanging(string value);
    partial void OnUPINChanged();
    partial void OnSpecialtyChanging(string value);
    partial void OnSpecialtyChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    #endregion
		
		public PHYSICIAN()
		{
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physician_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Physician_ID
		{
			get
			{
				return this._Physician_ID;
			}
			set
			{
				if ((this._Physician_ID != value))
				{
					this.OnPhysician_IDChanging(value);
					this.SendPropertyChanging();
					this._Physician_ID = value;
					this.SendPropertyChanged("Physician_ID");
					this.OnPhysician_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UPIN", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string UPIN
		{
			get
			{
				return this._UPIN;
			}
			set
			{
				if ((this._UPIN != value))
				{
					this.OnUPINChanging(value);
					this.SendPropertyChanging();
					this._UPIN = value;
					this.SendPropertyChanged("UPIN");
					this.OnUPINChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specialty", DbType="VarChar(50)")]
		public string Specialty
		{
			get
			{
				return this._Specialty;
			}
			set
			{
				if ((this._Specialty != value))
				{
					this.OnSpecialtyChanging(value);
					this.SendPropertyChanging();
					this._Specialty = value;
					this.SendPropertyChanged("Specialty");
					this.OnSpecialtyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PHYSICIAN_ORDER", Storage="_ORDERs", ThisKey="Physician_ID", OtherKey="Physician_ID")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_PHYSICIAN", Storage="_USER", ThisKey="User_Name", OtherKey="User_Name", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.PHYSICIANs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.PHYSICIANs.Add(this);
						this._User_Name = value.User_Name;
					}
					else
					{
						this._User_Name = default(string);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.PHYSICIAN = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.PHYSICIAN = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RESULT")]
	public partial class RESULT : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Result_ID;
		
		private System.DateTime _Result_Date;
		
		private string _Resulted_By;
		
		private string _Result_Report;
		
		private string _Order_ID;
		
		private string _Physician_Notes;
		
		private EntityRef<ORDER> _ORDER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResult_IDChanging(string value);
    partial void OnResult_IDChanged();
    partial void OnResult_DateChanging(System.DateTime value);
    partial void OnResult_DateChanged();
    partial void OnResulted_ByChanging(string value);
    partial void OnResulted_ByChanged();
    partial void OnResult_ReportChanging(string value);
    partial void OnResult_ReportChanged();
    partial void OnOrder_IDChanging(string value);
    partial void OnOrder_IDChanged();
    partial void OnPhysician_NotesChanging(string value);
    partial void OnPhysician_NotesChanged();
    #endregion
		
		public RESULT()
		{
			this._ORDER = default(EntityRef<ORDER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Result_ID
		{
			get
			{
				return this._Result_ID;
			}
			set
			{
				if ((this._Result_ID != value))
				{
					this.OnResult_IDChanging(value);
					this.SendPropertyChanging();
					this._Result_ID = value;
					this.SendPropertyChanged("Result_ID");
					this.OnResult_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_Date", DbType="Date NOT NULL")]
		public System.DateTime Result_Date
		{
			get
			{
				return this._Result_Date;
			}
			set
			{
				if ((this._Result_Date != value))
				{
					this.OnResult_DateChanging(value);
					this.SendPropertyChanging();
					this._Result_Date = value;
					this.SendPropertyChanged("Result_Date");
					this.OnResult_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Resulted_By", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Resulted_By
		{
			get
			{
				return this._Resulted_By;
			}
			set
			{
				if ((this._Resulted_By != value))
				{
					this.OnResulted_ByChanging(value);
					this.SendPropertyChanging();
					this._Resulted_By = value;
					this.SendPropertyChanged("Resulted_By");
					this.OnResulted_ByChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Result_Report", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Result_Report
		{
			get
			{
				return this._Result_Report;
			}
			set
			{
				if ((this._Result_Report != value))
				{
					this.OnResult_ReportChanging(value);
					this.SendPropertyChanging();
					this._Result_Report = value;
					this.SendPropertyChanged("Result_Report");
					this.OnResult_ReportChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Order_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Order_ID
		{
			get
			{
				return this._Order_ID;
			}
			set
			{
				if ((this._Order_ID != value))
				{
					if (this._ORDER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrder_IDChanging(value);
					this.SendPropertyChanging();
					this._Order_ID = value;
					this.SendPropertyChanged("Order_ID");
					this.OnOrder_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Physician_Notes", DbType="VarChar(MAX)")]
		public string Physician_Notes
		{
			get
			{
				return this._Physician_Notes;
			}
			set
			{
				if ((this._Physician_Notes != value))
				{
					this.OnPhysician_NotesChanging(value);
					this.SendPropertyChanging();
					this._Physician_Notes = value;
					this.SendPropertyChanged("Physician_Notes");
					this.OnPhysician_NotesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ORDER_RESULT", Storage="_ORDER", ThisKey="Order_ID", OtherKey="Order_ID", IsForeignKey=true)]
		public ORDER ORDER
		{
			get
			{
				return this._ORDER.Entity;
			}
			set
			{
				ORDER previousValue = this._ORDER.Entity;
				if (((previousValue != value) 
							|| (this._ORDER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ORDER.Entity = null;
						previousValue.RESULTs.Remove(this);
					}
					this._ORDER.Entity = value;
					if ((value != null))
					{
						value.RESULTs.Add(this);
						this._Order_ID = value.Order_ID;
					}
					else
					{
						this._Order_ID = default(string);
					}
					this.SendPropertyChanged("ORDER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SITE")]
	public partial class SITE : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Site_ID;
		
		private string _Name;
		
		private string _Address;
		
		private string _City;
		
		private string _State;
		
		private string _Zip;
		
		private EntitySet<ORDER> _ORDERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSite_IDChanging(string value);
    partial void OnSite_IDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnStateChanging(string value);
    partial void OnStateChanged();
    partial void OnZipChanging(string value);
    partial void OnZipChanged();
    #endregion
		
		public SITE()
		{
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Site_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Site_ID
		{
			get
			{
				return this._Site_ID;
			}
			set
			{
				if ((this._Site_ID != value))
				{
					this.OnSite_IDChanging(value);
					this.SendPropertyChanging();
					this._Site_ID = value;
					this.SendPropertyChanged("Site_ID");
					this.OnSite_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="VarChar(50)")]
		public string Address
		{
			get
			{
				return this._Address;
			}
			set
			{
				if ((this._Address != value))
				{
					this.OnAddressChanging(value);
					this.SendPropertyChanging();
					this._Address = value;
					this.SendPropertyChanged("Address");
					this.OnAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_State", DbType="VarChar(50)")]
		public string State
		{
			get
			{
				return this._State;
			}
			set
			{
				if ((this._State != value))
				{
					this.OnStateChanging(value);
					this.SendPropertyChanging();
					this._State = value;
					this.SendPropertyChanged("State");
					this.OnStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Zip", DbType="VarChar(MAX)")]
		public string Zip
		{
			get
			{
				return this._Zip;
			}
			set
			{
				if ((this._Zip != value))
				{
					this.OnZipChanging(value);
					this.SendPropertyChanging();
					this._Zip = value;
					this.SendPropertyChanged("Zip");
					this.OnZipChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SITE_ORDER", Storage="_ORDERs", ThisKey="Site_ID", OtherKey="Site_ID")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.SITE = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.SITE = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.STAFF")]
	public partial class STAFF : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Staff_ID;
		
		private string _Last_Name;
		
		private string _First_Name;
		
		private string _User_Name;
		
		private EntityRef<USER> _USER;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnLast_NameChanging(string value);
    partial void OnLast_NameChanged();
    partial void OnFirst_NameChanging(string value);
    partial void OnFirst_NameChanged();
    partial void OnUser_NameChanging(string value);
    partial void OnUser_NameChanged();
    #endregion
		
		public STAFF()
		{
			this._USER = default(EntityRef<USER>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Last_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Last_Name
		{
			get
			{
				return this._Last_Name;
			}
			set
			{
				if ((this._Last_Name != value))
				{
					this.OnLast_NameChanging(value);
					this.SendPropertyChanging();
					this._Last_Name = value;
					this.SendPropertyChanged("Last_Name");
					this.OnLast_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_First_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string First_Name
		{
			get
			{
				return this._First_Name;
			}
			set
			{
				if ((this._First_Name != value))
				{
					this.OnFirst_NameChanging(value);
					this.SendPropertyChanging();
					this._First_Name = value;
					this.SendPropertyChanged("First_Name");
					this.OnFirst_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_User_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string User_Name
		{
			get
			{
				return this._User_Name;
			}
			set
			{
				if ((this._User_Name != value))
				{
					if (this._USER.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUser_NameChanging(value);
					this.SendPropertyChanging();
					this._User_Name = value;
					this.SendPropertyChanged("User_Name");
					this.OnUser_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="USER_STAFF", Storage="_USER", ThisKey="User_Name", OtherKey="User_Name", IsForeignKey=true)]
		public USER USER
		{
			get
			{
				return this._USER.Entity;
			}
			set
			{
				USER previousValue = this._USER.Entity;
				if (((previousValue != value) 
							|| (this._USER.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._USER.Entity = null;
						previousValue.STAFFs.Remove(this);
					}
					this._USER.Entity = value;
					if ((value != null))
					{
						value.STAFFs.Add(this);
						this._User_Name = value.User_Name;
					}
					else
					{
						this._User_Name = default(string);
					}
					this.SendPropertyChanged("USER");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TEST")]
	public partial class TEST : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Test_Code;
		
		private string _Description;
		
		private EntitySet<ORDER> _ORDERs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTest_CodeChanging(string value);
    partial void OnTest_CodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TEST()
		{
			this._ORDERs = new EntitySet<ORDER>(new Action<ORDER>(this.attach_ORDERs), new Action<ORDER>(this.detach_ORDERs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Test_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Test_Code
		{
			get
			{
				return this._Test_Code;
			}
			set
			{
				if ((this._Test_Code != value))
				{
					this.OnTest_CodeChanging(value);
					this.SendPropertyChanging();
					this._Test_Code = value;
					this.SendPropertyChanged("Test_Code");
					this.OnTest_CodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TEST_ORDER", Storage="_ORDERs", ThisKey="Test_Code", OtherKey="Test_Code")]
		public EntitySet<ORDER> ORDERs
		{
			get
			{
				return this._ORDERs;
			}
			set
			{
				this._ORDERs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.TEST = this;
		}
		
		private void detach_ORDERs(ORDER entity)
		{
			this.SendPropertyChanging();
			entity.TEST = null;
		}
	}
}
#pragma warning restore 1591
